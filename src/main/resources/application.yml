constants:
  file:
    upload-directory: D:\SQL(04-14~)\backend\springboot\upload\greengram
    profile-pic: /profile
    feed-pic: /feed
  comment:
    start-index: 0
    need-for-view-count: 3
  jwt:
    issuer: green502@green.com # 토큰 발행자
    bearer-format: JWT

    claim-key: signedUser
    secret-key: DaeguGreenArtAcademyClass502MsaClassStreetFighterKing

    access-token-cookie-name: access-token
    access-token-cookie-path: / # 모든 경로에서 access-token 값이 넘어온다.
    access-token-cookie-validity-seconds: 900 # 15분
    access-token-validity-milliseconds: 900_000 # 15분

    refresh-token-cookie-name: refresh-token
    refresh-token-cookie-path: /api/user/reissue # 해당 경로일 때만 refresh-token 값이 넘어온다.
    refresh-token-cookie-validity-seconds: 1_296_000
    refresh-token-validity-milliseconds: 1_296_000_000
  oauth2:
    base-uri: /oauth2/authorization
    # FE에서 소셜 로그인 요청할 때 사용할 주소
    # 플랫폼과 통신을 3번 정도 하는데 각 통신들이 하나의 작업을 위한 트랜잭션
    # 연결시키기 위해 쿠키를 사용한다.
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-seconds: 180
    authorized-redirect-uris:
      - http://localhost:5173/fe/redirect

spring:
  application:
    name: greengram
  datasource:
    url: jdbc:log4jdbc:mariadb://localhost/greengram
    username: root
    password: green502
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
  jackson:
    default-property-inclusion: non_null # 응답 JSON에서 null인 속성은 제외
  jpa:
    database: mysql
    defer-datasource-initialization: true
    hibernate:
      #ddl-auto: create # 프로젝트 실행 시마다 테이블을 모두 drop 후 create 한다.
      ddl-auto: update # entity가 새롭게 추가될 때만 create 한다.
    properties:
      hibernate:
        jdbc:
          batch_size: 20
        format_sql: true # 쿼리문 로그를 찍어줄 때 보기 편하게 포맷팅
        order_updates: true # batch 작업 시 필요
        show_sql: true
  security:
    oauth2:
      client:
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # 카카오 인증 처리 Url
            token-uri: https://kauth.kakao.com/oauth/token # 토큰(JWT) 받을 때 사용하는 Url
            user-info-uri: https://kapi.kakao.com/v2/user/me # 유저 정보 얻을 때 사용하는 Url
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
        registration:
          google:
            client-id: asdf
            client-secret: asdf
          scope:
            - email
            - profile
          kakao:
            client-name: Kakao
            client-id: 7103106e0269bedcd5bcb7477a4b02e9
            client-secret: LJZcnpal1r3I43lsyp7r2thkHt7JBVSf
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - profile_image
            # baseUrl: 서버가 돌아가고 있는 host 주소값
            # action: login
            # registrationId: kakao
            # 결과: (만약 localhost:8080으로 동작 중이면)
            #      http://localhost:8080/login/oauth2/code/kakao
          naver:
            client-name: Naver
            client-id: 4QnMGd8jt2TdhFenvbR5
            client-secret: z8Pg46mJcK
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - name
              - email
              - profile_image
              - nickname
  servlet:
    multipart:
      max-file-size: 15MB
  sql:
    init:
      mode: always

mybatis:
  configuration:
    map-underscore-to-camel-case: true
  mapper-locations: mappers/**/*.xml